<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>奈奈一一</title>
    <url>/2024/04/10/nnyy/</url>
    <content><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="健康成长，快乐生活"><a href="#健康成长，快乐生活" class="headerlink" title="健康成长，快乐生活"></a>健康成长，快乐生活</h2>]]></content>
      <categories>
        <category>家庭</category>
        <category>孩子</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>DMC控制</title>
    <url>/2024/04/10/DMC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="DMC控制"><a href="#DMC控制" class="headerlink" title="DMC控制"></a>DMC控制</h1>]]></content>
      <categories>
        <category>专业知识</category>
        <category>控制</category>
        <category>DMC控制</category>
      </categories>
      <tags>
        <tag>控制</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/2024/04/10/test-post/</url>
    <content><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="健康成长，快乐生活"><a href="#健康成长，快乐生活" class="headerlink" title="健康成长，快乐生活"></a>健康成长，快乐生活</h2>]]></content>
      <categories>
        <category>专业技能</category>
        <category>测试hexo</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>规划控制</title>
    <url>/2024/04/10/auto-driving/</url>
    <content><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="健康成长，快乐学习"><a href="#健康成长，快乐学习" class="headerlink" title="健康成长，快乐学习"></a>健康成长，快乐学习</h2>]]></content>
      <categories>
        <category>专业知识</category>
        <category>控制</category>
        <category>自动驾驶-规划控制</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
      </tags>
  </entry>
  <entry>
    <title>胖胖琦琦带着奈奈一一去闲林埠</title>
    <url>/2024/04/10/qq/</url>
    <content><![CDATA[<h1 id="闲林埠"><a href="#闲林埠" class="headerlink" title="闲林埠"></a>闲林埠</h1><p><img src="/img/3.jpg" alt="闲林埠"><br>相传唐初余杭县令张士衡告老还乡，闲游至此，取“闲居林下”之意，便有了“闲林”之名载于史籍。</p>
<p>宋代时这里是酒库；明清时这里变成热闹的埠头，汇集了南来北往的人。</p>
<p>古时的闲林埠见证了闲林的繁华史，它曾是“珍异所聚，商贾辐辏”之处，更是书香门第、中医世家等名门望族居住之地。<br><img src="/img/nnyy_3.jpg" alt="nn&amp;&amp;yy"></p>
<h3 id="胖胖琦琦带奈奈一一去踏青"><a href="#胖胖琦琦带奈奈一一去踏青" class="headerlink" title="胖胖琦琦带奈奈一一去踏青"></a>胖胖琦琦带奈奈一一去踏青</h3><p><img src="/img/4.jpg" alt="nn&amp;&amp;yy2"><br><img src="/img/6.jpg" alt="nn&amp;&amp;yy3"></p>
<h4 id="闲林埠闲游"><a href="#闲林埠闲游" class="headerlink" title="闲林埠闲游"></a>闲林埠闲游</h4><p><img src="/img/1.jpg" alt="nn&amp;&amp;yy2"><br><img src="/img/2.jpg" alt="nn&amp;&amp;yy3"></p>
]]></content>
      <categories>
        <category>家庭</category>
        <category>老婆</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络控制</title>
    <url>/2024/04/10/%E6%B8%A9%E5%BA%A6%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="温度控制总结"><a href="#温度控制总结" class="headerlink" title="温度控制总结"></a>温度控制总结</h1><h2 id="温度控制模块"><a href="#温度控制模块" class="headerlink" title="温度控制模块"></a>温度控制模块</h2><ol>
<li>温度控制器是一种用来控制温度而无需操作人员的大量参与的仪器。温度控制系统的控制器从<strong>热电偶或RTD</strong>等温度传感器接收输入信号后， 将实际温度与所需控制温度或设定值进行比较。然后将<strong>输出信号</strong>提供给<strong>控制元件</strong>。</li>
<li>控制器从温度传感器接收输入信号，并将输出信号发送至所连接的<strong>加热器</strong>或<strong>风扇</strong>等控制元件。控制器通常只是整个温度控制系统的一部分，因此在选择适当的控制器时，应对整个系统进行分析和考量。</li>
</ol>
<h3 id="温度控制模块原理"><a href="#温度控制模块原理" class="headerlink" title="温度控制模块原理"></a>温度控制模块原理</h3><h4 id="开-关控制"><a href="#开-关控制" class="headerlink" title="开&#x2F;关控制"></a>开&#x2F;关控制</h4><p><strong>开关控制器</strong>是最简单的一类温度控制设备。此类设备的输出非开即关，无中间状态。只有温度浮动于设定值时，开关控制器才会切换输出。在加热控制中，当温度低于设定值时，输出接通，并在高于设定值时则输出断开。每当温度跨越设定值时，控制器都会切换输出状态，因此过程温度将不断循环，从低于设定值上升到超过设定值，再降回至设定值以下。为<strong>防止因循环速度过快而损坏接触器和阀门</strong>，应在控制器操作中<strong>增加一个开关差值</strong>，又称“<strong>迟滞</strong>”。采用这种机制时，只有在温度超过设定值一定程度后，输出才会再次关闭或打开。这样，当温度围绕设定值上下循环波动时，开关差值可防止输出“抖动”或快速频繁的切换。开关控制通常用于以下应用场合：无需精确控制的应用、无法处理能源频繁开关的系统、因质量较大而温度变化极为缓慢的系统，以及需要温度报警的场合。限值控制器是用于报警的一种特殊类型开关控制。这种控制器采用必须手动复位的自锁继电器，可在达到特定温度时关闭过程。</p>
<h4 id="比例控制"><a href="#比例控制" class="headerlink" title="比例控制"></a>比例控制</h4><p>比例控制设计用于<strong>消除伴随通断控制的循环</strong>.在温度接近设定点的同时，比例控制器降低向加热器供应的平均功率。这会放慢加热器加热的效果，从而使之不会超越设定点，而是会接近设定点并维持一个稳定的温度。此比例控制操作可以通过短时间开启和关闭输出来实现。此”时间比例控制”通过改变”开启”时间与”关闭”时间之比来控制温度。比例控制操作在设定点温度<strong>附近的“比例带”内</strong>才动作。在此比例带之外，控制器作为开关装置工作，无论输出全开（小于比例带）还是全关（大于比例带）。然而，在比例带以内，输出的开启和关闭与测量值和设定点之差成比例。在设定点（比例带的中点），输出开关比例是1:1，即接通时间和断开时间相等。如果温度远离设定点，这表示开启时间和关闭时间的变化与温差成比例。如果温度低于设定点，输出的开启时间更长；如果温度过高，则输出的关闭时间更长。</p>
<h4 id="PID控制"><a href="#PID控制" class="headerlink" title="PID控制"></a>PID控制</h4><p>第三种控制器类型在比例控制的基础上引入积分和微分控制，即<strong>PID控制</strong>。这种控制器将比例控制与另外两种调整机制相结合，有助于设备对系统中的变化进行自动补偿。积分和微分调整以时间为单位来表示，又分别称为“复位”和“速率”调整。必须针对特定系统通过反复试错来调整或“整定”比例、积分和微分项。在三种控制器类型中，PID控制器的精确性和稳定性最高，最适合用于质量相对较小的系统，以及对过程中能量的变化十分敏感的系统。对于负载变化频繁的系统、以及因设定点、可用能量或被控质量的频繁变化而需要通过控制器进行自动补偿的系统，都建议使用此类控制器。OMEGA提供多款可自动进行自整定的控制器供选择。这些控制器被称为自整定控制器。</p>
<h2 id="PID恒温控制"><a href="#PID恒温控制" class="headerlink" title="PID恒温控制"></a>PID恒温控制</h2><p>PID是闭环控制算法，要实现PID算法，必须在<strong>硬件上具有闭环控制</strong>，这就得有反馈。比如控制一个温度，就得有一个<strong>测量温度的传感器</strong>，并将结果反馈到控制路线上，实现温度的控制。</p>
<h3 id="PID温度控制实现"><a href="#PID温度控制实现" class="headerlink" title="PID温度控制实现"></a>PID温度控制实现</h3><ol>
<li>离散化PID</li>
</ol>
<h2 id="模糊理论"><a href="#模糊理论" class="headerlink" title="模糊理论"></a>模糊理论</h2><p><strong>模糊</strong>是相对于<strong>确定</strong>来定义的，生活中年龄20岁、误差0.6等这样的量都是<strong>唯一确定</strong>的，可直接计算得出部分结论；但生活中同样还存在年轻、误差小等这样<strong>描述量的词</strong>，我们认为它们是<strong>模糊的</strong>。<br>简单说：确定的：不是0就是1；模糊的：[0,1]的隶属度</p>
<ol>
<li><p>基本定义</p>
<ol>
<li><strong>论域</strong>：问题讨论的范围，常用U表示<ol>
<li>模糊的量往往是要限定在一定语义环境中的，例如10个老年人讨论谁更年轻，在这堆人里也许50岁就算很年轻了，但按常理来说50岁其实并不算年轻，这就是讨论模糊时范围的重要性。</li>
</ol>
</li>
<li><strong>因素集</strong>：论域中的元素组成的集合，即模糊集合<ol>
<li>把论域中的因素统一表示出来，记作U&#x3D;{u1,u2,…,un}，ui表示论域内的元素，如讨论年龄大小问题中50岁这个元素。</li>
</ol>
</li>
<li><strong>模糊集合</strong>和<strong>隶属函数</strong>：因素集A的隶属函数，uA(x)为隶属度，A -&gt; [0,1]<ol>
<li>通过隶属函数计算出反映<strong>集合元素</strong>属于该<strong>集合的程度</strong>。</li>
<li>论域U中有0岁到200岁的人，构成年轻集A和年老集B两个集合，x表50岁，则μA(x)&#x3D;0.2表50岁是年轻集的程度为0.2，μB(x)&#x3D;0.7表50岁是年老集的程度为0.7</li>
</ol>
</li>
<li></li>
</ol>
</li>
<li><p>模糊集合的定义</p>
<ol>
<li>模糊集合分为离散型和连续型，主要使用离散型</li>
<li>离散型主要有三种：Zaden表示，序偶表示法，向量表示法<ol>
<li>Zaden表示法：最常用<ol>
<li>集合A中的元素x如下表示，这里面使用+不表相加而表连接，分式不表分数表隶属度和元素的对应。</li>
<li><img src="/img/fuzzy_control/image-1.png" alt="Alt text"></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>隶属函数的定义</p>
<ol>
<li><strong>隶属函数</strong>和<strong>隶属度</strong>是我们运算中最重要的东西，因为通过<strong>隶属函数</strong>我们将一些描述性的量转变为了确定的值，即<strong>隶属度</strong>。那我们怎么得到隶属函数呢？常用的有模糊<strong>统计方法</strong>和<strong>指派法</strong>。<ol>
<li>指派法：最常用根据现有问题，套用已有模糊分布，通过拟合数据求分布参数。常用的分布类型有正态型、梯形型、k次抛物线型等，这里给出常用的梯型<ol>
<li>梯形型</li>
<li><img src="/img/fuzzy_control/image.png" alt="Alt text"></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="模糊控制"><a href="#模糊控制" class="headerlink" title="模糊控制"></a>模糊控制</h2><p>模糊控制是以<strong>模糊集理论</strong>、<strong>模糊逻辑推理</strong>为基础的一种智能控制方法，它是从行为上模仿人的模糊推理和决策过程的一种智能控制方法。该方法首先将操作人员或专家经验<strong>编成模糊规则</strong>，然后将来自传感器的<strong>实时信号模糊化</strong>，<strong>将模糊化后的信号作为模糊规则的输入</strong>，完成<strong>模糊推理</strong>，将推理后得到的输出量加到执行器上。</p>
<h3 id="模糊规则"><a href="#模糊规则" class="headerlink" title="模糊规则"></a>模糊规则</h3><p>模糊控制只是模糊理论应用之一，在进行模糊控制之前，需要对模糊理论熟悉理解；</p>
<h4 id="模糊理论基本概念"><a href="#模糊理论基本概念" class="headerlink" title="模糊理论基本概念"></a>模糊理论基本概念</h4><ol>
<li>论域</li>
</ol>
<h3 id="模糊控制规则"><a href="#模糊控制规则" class="headerlink" title="模糊控制规则"></a>模糊控制规则</h3><p><strong>模糊控制</strong>是以<strong>模糊集理论、模糊语言变量和模糊逻辑推理</strong>为基础的一种智能控制方法，它是从行为上模仿人的模糊推理和决策过程的一种智能控制算法。模糊控制<strong>首先将操作人员或专家经验编成模糊规则</strong>，然后将来自传感器的<strong>实时信号模糊化</strong>，将<strong>模糊化后的信号作为模糊规则的输入</strong>，完成<strong>模糊推理</strong>，将推理后得到的输出量加到执行器上。</p>
<h2 id="神经网络模糊PID"><a href="#神经网络模糊PID" class="headerlink" title="神经网络模糊PID"></a>神经网络模糊PID</h2>]]></content>
      <categories>
        <category>专业知识</category>
        <category>控制</category>
        <category>神经网络控制</category>
      </categories>
      <tags>
        <tag>控制</tag>
      </tags>
  </entry>
  <entry>
    <title>模糊控制</title>
    <url>/2024/04/10/%E6%A8%A1%E7%B3%8A%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="模糊理论"><a href="#模糊理论" class="headerlink" title="模糊理论"></a>模糊理论</h2><p><strong>模糊</strong>是相对于<strong>确定</strong>来定义的，生活中年龄20岁、误差0.6等这样的量都是<strong>唯一确定</strong>的，可直接计算得出部分结论；但生活中同样还存在年轻、误差小等这样<strong>描述量的词</strong>，我们认为它们是<strong>模糊的</strong>。<br>简单说：确定的：不是0就是1；模糊的：[0,1]的隶属度</p>
<ol>
<li><p>基本定义</p>
<ol>
<li><strong>论域</strong>：问题讨论的范围，即是全集，常用U表示<ol>
<li>模糊的量往往是要限定在一定语义环境中的，例如10个老年人讨论谁更年轻，在这堆人里也许50岁就算很年轻了，但按常理来说50岁其实并不算年轻，这就是讨论模糊时范围的重要性。</li>
</ol>
</li>
<li><strong>因素集</strong>：论域中的元素组成的集合，即模糊集合<ol>
<li>把论域中的因素统一表示出来，记作U&#x3D;{u1,u2,…,un}，ui表示论域内的元素，如讨论年龄大小问题中50岁这个元素。</li>
</ol>
</li>
<li><strong>模糊集合</strong>和<strong>隶属函数</strong>：因素集A的隶属函数，uA(x)为隶属度，<strong>A -&gt; [0,1]</strong><ol>
<li>通过隶属函数计算出反映<strong>集合元素</strong>属于该<strong>集合的程度</strong>。</li>
<li>论域U中有0岁到200岁的人，构成年轻集A和年老集B两个集合，x表50岁，则μA(x)&#x3D;0.2表50岁是年轻集的程度为0.2，μB(x)&#x3D;0.7表50岁是年老集的程度为0.7</li>
</ol>
</li>
<li></li>
</ol>
</li>
<li><p>模糊集合的定义</p>
<ol>
<li>模糊集合分为离散型和连续型，主要使用离散型</li>
<li>离散型主要有三种：Zaden表示，序偶表示法，向量表示法<ol>
<li>Zaden表示法：最常用<ol>
<li>集合A中的元素x如下表示，这里面使用+不表相加而表连接，分式不表分数表隶属度和元素的对应。</li>
<li><img src="/img/fuzzy_control/image-1.png" alt="Alt text"></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>隶属函数的定义</p>
<ol>
<li><strong>隶属函数</strong>和<strong>隶属度</strong>是我们运算中最重要的东西，因为通过<strong>隶属函数</strong>我们将一些描述性的量转变为了确定的值，即<strong>隶属度</strong>。那我们怎么得到隶属函数呢？常用的有模糊<strong>统计方法</strong>和<strong>指派法</strong>。<ol>
<li>指派法：最常用根据现有问题，套用已有模糊分布，通过拟合数据求分布参数。常用的分布类型有正态型、梯形型、k次抛物线型等，这里给出常用的梯形和三角形<ol>
<li>梯形型</li>
<li><img src="/img/fuzzy_control/image.png" alt="Alt text"></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="模糊控制"><a href="#模糊控制" class="headerlink" title="模糊控制"></a>模糊控制</h2><p>模糊控制是以<strong>模糊集理论</strong>、<strong>模糊逻辑推理</strong>为基础的一种智能控制方法，它是从行为上模仿人的模糊推理和决策过程的一种智能控制方法。该方法首先将操作人员或专家经验<strong>编成模糊规则</strong>，然后将来自传感器的<strong>实时信号模糊化</strong>，<strong>将模糊化后的信号作为模糊规则的输入</strong>，完成<strong>模糊推理</strong>，然后<strong>解模糊</strong>将推理后得到的输出量加到执行器上。</p>
<h3 id="模糊控制系统组成"><a href="#模糊控制系统组成" class="headerlink" title="模糊控制系统组成"></a>模糊控制系统组成</h3><p>可以简单理解为：将经典PID控制回路中的PID模块改成了模糊控制模块。其中，模糊控制器的内部结构可以分为3部分：<br>在系统控制时，输入信号（往往是期望值与返回值的误差e进入模糊控制器，先进行<strong>模糊化</strong>，即将连续的信号转为离散的信号，将原论域转为离散论域；之后根据离散论域中的离散值，在<strong>模糊规则</strong>库中采取相应的模糊控制规则；最后将控制信号再进行一步逆操作<strong>解模糊</strong>，把离散论域转化回原论域进行输出。<br><img src="/img/fuzzy_control/image-2.png" alt="Alt text"></p>
<ol>
<li>模糊规则：<ol>
<li>模糊控制利用的是人们在长期工程实践中总结出来的控制规律或经验，而不是精确的数学计算。例如，对于在限速60km&#x2F;h路段驾驶的司机来说，当司机通过感官感受到“车速快”这一“感性”结论后，就会采取“松油门并踩刹车”的操作，这一系列动作中并不含有“定量”的数值（如将刹车踏板踩下几厘米），而是依靠司机的经验和直觉。</li>
<li>为了模拟这一“依靠直觉”的过程，就需要建立这样一套模糊规则，使得程序能够在面临一些情况时，按照人类的经验给出“相对模糊且大概”的调整方式，而不是定量的调整。<br>  对于上面司机的例子来说，他在限速路段行车过程中所面临的所有情况可能如下：<br>  若车速过多大于60，则松开油门并踩刹车；<br>  若车速大于60不多，则松开油门并轻踩刹车；<br>  若车速略微高于60，则松开油门，不踩刹车；<br>  若车速等于60，则保持现状，即油门和刹车均不移动；<br>  若车速略微低于60，则轻踩油门；<br>  若车速低于60不多，则踩油门；<br>  若车速过低，则甚至可能考虑切换档位。</li>
<li>一般地，在控制理论中，通过比较给定值和实际值的误差大小，指定相应的决策策略。对于误差来说，分为正大、正中、正小、零、负小、负中、负大几种情况，用PB、PM、PS、ZE、NS、NM、NB表示。<br>  对于上述行车的例子，设车速与规定车速60的误差为e ee，则可以表示为：<br>  if e &#x3D;&#x3D; PB, then 油门 &#x3D;&#x3D; NB and 刹车 &#x3D;&#x3D; NM;<br>  if e &#x3D;&#x3D; PM, then 油门 &#x3D;&#x3D; NB and 刹车 &#x3D;&#x3D; NS;<br>  if e &#x3D;&#x3D; PS, then 油门 &#x3D;&#x3D; NB and 刹车 &#x3D;&#x3D; ZE;<br>  if e &#x3D;&#x3D; ZE, then 油门 &#x3D;&#x3D; ZE and 刹车 &#x3D;&#x3D; ZE;<br>  if e &#x3D;&#x3D; NS, then 油门 &#x3D;&#x3D; PS and 刹车 &#x3D;&#x3D; ZE;<br>  if e &#x3D;&#x3D; NM, then 油门 &#x3D;&#x3D; PM and 刹车 &#x3D;&#x3D; ZE;<br>  if e &#x3D;&#x3D; NB, then 油门 &#x3D;&#x3D; PB and 刹车 &#x3D;&#x3D; ZE；</li>
</ol>
</li>
</ol>
<h3 id="模糊控制流程"><a href="#模糊控制流程" class="headerlink" title="模糊控制流程"></a>模糊控制流程</h3><ol>
<li>选择输入输出模糊集</li>
<li>定义输入输出隶属度函数（不同的隶属度函数，会导致不同的控制特性）</li>
<li>建立模糊控制表</li>
<li>建立模糊控制规则</li>
<li>模糊推理</li>
<li>反模糊化</li>
<li>输出结果</li>
</ol>
<h4 id="模糊算法的原理"><a href="#模糊算法的原理" class="headerlink" title="模糊算法的原理"></a>模糊算法的原理</h4><p>　　模糊算法是一种基于智能推理的算法，虽然称之为模糊算法其实并不模糊，实际上是一种逐步求精的思想。一个模糊控制器主要是由模糊化，模糊推理机和精确化三个功能模块和知识库（包括数据库和规则库）构成的。在此我们近讨论模糊控制的几个主要问题。</p>
<p>1.1、<strong>输入量的量化</strong><br>　　输入数据都是精确的，要实现模糊算法需要现对其实现量化。所谓量化就是通过量化函数将输入量投射到一定的数字级别，一般都是相对于0对称的数字区间。具体投射到怎样的区间根据实际情况而定，因为这会直接影响到计算的精度。<br>1.2、<strong>模糊化</strong><br>　　模糊化是模糊算法非常重要的一步，首先确定对应各语言变量的模糊子集，然后根据量化的结果，我们就可以判断该输入所属的集合并计算出对应的隶属度。计算隶属度的方法有很多，最常用的是使用三角形隶属度函数或梯形隶属度函数等来计算获得。<br>1.3、<strong>规则库</strong><br>　　规则库是基于控制量的模糊化而的味道的，是实现模糊推理的基础，很大程度上依赖于经验来完成。规则库的表现形式可以有多种，具体实现的形式根据我们实现的方便。<br>1.4、<strong>推理机</strong><br>　　推理决策才是模糊控制的核心，它利用知识库中的信息和模糊运算方式，模拟人的推理决策的思想方法，在一定的输入条件下激活相应的控制规则给出适当的模糊控制输出。<br>1.5、<strong>解模糊</strong><br>　　我们通过模糊推理，得到一系列的模糊表达，需要进行解模糊操作才能得到紧缺的数据。常用的解模糊方法有：<br>        1. 最大隶属度法——计算简单，适用于控制要求不高场合。<br>        2. 重心法——输出更平滑，但计算难度大<br>        3. 加权平均法——一般在工业上应用最广泛</p>
<h2 id="模糊PID"><a href="#模糊PID" class="headerlink" title="模糊PID"></a>模糊PID</h2><p>模糊PID即为在PID控制的基础上，与模糊控制进行结合，使得PID的三个系数可以在线改变，可以说，模糊PID控制器是将模糊算法与PID控制参数的<strong>自整定相结合</strong>的一种控制算法。</p>
<p>模糊PID控制是以偏差e及偏差的变化de为输入，利用模糊控制规则在线对PID参数进行调整，以满足不同的偏差e和偏差的增量de对PID参数的不同要求，从而达到PID控制器参数的自适应调节的效果。其结构图如下：<br><img src="/img/fuzzy_control/1706773231422.png" alt="Alt text"></p>
<h3 id="模糊PID算法的设计"><a href="#模糊PID算法的设计" class="headerlink" title="模糊PID算法的设计"></a>模糊PID算法的设计</h3><ol>
<li><p>输入值的模糊化</p>
<ol>
<li>输入值的模糊化就是将用于计算的<strong>输入</strong>对应到<strong>标准化的数值区间</strong>，并根据<strong>量化结果</strong>和<strong>模糊化子集</strong>得到该输入对子集的<strong>隶属度</strong>。我们在使用偏差e和偏差增量de作为输入实现控制参数调整则需要对e和de进行模糊化。</li>
<li>确定<strong>量化函数</strong>，将e和de的具体值和模糊集对应上。要确定量化函数，我们先引入e和de模糊集对应的<strong>论域</strong>，定义为 **{-3，-2，-1，0，1，2，3}**，论域可以说是一个认为定义的范围，由于e, de和kp, ki, kd的范围各不相同，所以把输入映射到论域上，会更好的处理。</li>
<li>确定e和de的<strong>模糊子集</strong>，对于PID控制我们选则：负大[NB]、负中[NM]、负小[NS]、零[ZO]、正小[PS]、正中[PM]、正大[PB]等7个语言变量就能够有足够精度表达其模糊子集。所以我们定义e和de的模糊子集均为 **{NB，NM，NS，ZO，PS，PM，PB}**，模糊子集分类是对论域进行划分。</li>
<li>确定<strong>隶属度函数</strong>，隶属度是一个介于0和1之间的值，用以描述对应一个输入属于某一个模糊自己的程度。一般我们描述成隶属度函数，可采用的隶属度函数很多，我们在次采用线性的隶属度函数，或者称为三角隶属度函数，其函数关系如下：<br><img src="/img/fuzzy_control/image-6.png" alt="Alt text"><br><strong>例子（PID）</strong>：<br><strong>a.</strong> 针对上面的描述：对每一个端点进行等级划分，-3—&gt;NB(负大), -2—&gt;NM(负中), -1—-&gt;NS(负小), 0—&gt;ZO(零), 1—-&gt;PS(正小), 2—-&gt;PM(正中), 3—-&gt;PB(正大)，假如输入e的范围[-10, 10]，此时e的值为8，通过映射到论域后，值为2.4，2.4在[2, 4]区间；<br><img src="/img/fuzzy_control/1706838801032.png" alt="Alt text"><br><strong>b.</strong> 隶属度函数的值域为[0,1],若输入e经过映射后的值为 2.4，那么对应下图红线与绿线的值分别为 0.6，0.4, 这两个就是隶属度，表示该输入属于 PM 的概率为0.6，而属于 PB 的概率为0.4。所以隶属度也为概率。<br><img src="/img/fuzzy_control/1706838907903.png" alt="Alt text"><br><strong>c.</strong> 通过上面的论域，总结模糊化的过程：区间映射，模糊对应，隶属度函数计算：<br><img src="/img/fuzzy_control/1706839153543.png" alt="Alt text"></li>
</ol>
</li>
<li><p>建立模糊规则表</p>
<ol>
<li>模糊推理，即通过e, de的隶属度进行查表得到输出的大小程度，即NB, NS等，所以模糊推理的核心就是建立规则表；</li>
<li>在这里我们要对Kp、Ki和Kd三个参数进行调整，所以要建立这3个变量的模糊规则库。</li>
<li>Kp模糊规则设计<br>在PID控制器中，Kp值的选取决定于系统的响应速度。增大Kp能提高响应速度，减小稳态偏差；但是，Kp值过大会产生较大的超调，甚至使系统不稳定减小Kp可以减小超调，提高稳定性，但Kp过小会减慢响应速度，延长调节时间。因此，调节初期应适当取较大的Kp值以提高响应速度，而在调节中期，Kp则取较小值，以使系统具有较小的超调并保证一定的响应速度；而在调节过程后期再将Kp值调到较大值来减小静差，提高控制精度。基于上述描述我们定义Kp的模糊规则如下：<br><img src="/img/fuzzy_control/image-7.png" alt="Alt text"></li>
<li>Ki模糊规则设计<br>在系统控制中，积分控制主要是用来消除系统的稳态偏差。由于某些原因(如饱和非线性等)，积分过程有可能在调节过程的初期产生积分饱和，从而引起调节过程的较大超调。因此，在调节过程的初期，为防止积分饱和，其积分作用应当弱一些，甚至可以取零；而在调节中期，为了避免影响稳定性，其积分作用应该比较适中；最后在过程的后期，则应增强积分作用，以减小调节静差。依据以上分析，我们制定的Ki模糊规则如下：<br><img src="/img/fuzzy_control/image-8.png" alt="Alt text"></li>
<li>Kd模糊规则设计<br>微分环节的调整主要是针对大惯性过程引入的，微分环节系数的作用在于改变系统的动态特性。系统的微分环节系数能反映信号变化的趋势，并能在偏差信号变化太大之前，在系统中引入一个有效的早期修正信号，从而加快响应速度，减少调整时间，消除振荡．最终改变系统的动态性能。因此，Kd值的选取对调节动态特性影响很大。Kd值过大，调节过程制动就会超前，致使调节时间过长；Kd值过小，调节过程制动就会落后，从而导致超调增加。根据实际过程经验，在调节初期，应加大微分作用，这样可得到较小甚至避免超调；而在中期，由于调节特性对Kd值的变化比较敏感，因此，Kd值应适当小一些并应保持固定不变；然后在调节后期，Kd值应减小，以减小被控过程的制动作用，进而补偿在调节过程初期由于Kd值较大所造成的调节过程的时间延长。依据以上分析，我们制定Kd的模糊规则如下：<br><img src="/img/fuzzy_control/image-9.png" alt="Alt text"></li>
<li>后处理<br>  根据偏差E和偏差增量DE模糊化的结果以及规则库推理出∆Kp、∆Ki、∆Kd对应的模糊子集。由于前面我们设计的是采用隶属度函数来定义输入输出量在模糊子集的隶属度，所以推理出来的∆Kp、∆Ki、∆Kd的模糊子集通常是一个由模糊变量组成的矩阵。而输入量e和de则是一个由模糊变量组成的向量<br>  <strong>例子（PID）:</strong><br>  <strong>a.</strong> 假设此刻输入e为8，de为-12，而e的范围为[-1, 10], de的范围为[-20, 20]。通过通过模糊化得到 e 的隶属度为0.6(PM)与0.4(PB)，de&#x2F;dt 的隶属度为0.8(NM)与0.2(NS)，对 e 与 de&#x2F;dt 的隶属度进行两两组合，并进行查表，得到下表的关系：<br>  <img src="/img/fuzzy_control/1706839548015.png" alt="Alt text"><br>  <strong>b.</strong> 继而计算输出Kp，Ki, Kd的隶属度<br>  <img src="/img/fuzzy_control/1706839621949.png" alt="Alt text"><br>  <strong>c.</strong> 最后进行个输出的隶属度进行整合，例如 Kp, 由上面计算可知，Kp 的隶属度为 0.8(ZO)，0.12(NS)，0.08(NM)。</li>
</ol>
</li>
<li><p>解模糊处理</p>
<ol>
<li>解模糊就是根据模糊推理得到的<strong>各个输出的隶属度</strong>计算出在论域中的<strong>那个值</strong>，然后根据<strong>映射区间</strong>，得到<strong>输出</strong>的Kp，Ki和Kd值。</li>
<li>我们前面设计了三角隶属度函数，并采用相同的量化目标即论域{-3，3}，所以在某一时刻，输入输出所处的模糊变量的隶属度是相同的，基于这一基础，我们采用重心法计算各输出量的量化值。<br><img src="/img/fuzzy_control/image-3.png" alt="Alt text"><br><strong>例子（PID）：</strong><br><strong>a.</strong> 以上面的例子进行阐述计算的过程。由上面可知，Kp 的隶属度为0.8(ZO)，0.12(NS)，0.08(NM), 而在论域讲解时，已经将 ZO 的值定为0，NS 的值定为-1，NM 的值定为-2。那么 Kp 的期望为:<br><img src="/img/fuzzy_control/1706840288671.png" alt="Alt text"><br><strong>b.</strong> 把期望作为 Kp 在论域的值，在确定 Kp 的范围后，根据区间映射公式，可得出 Kp 的输出值。<br><strong>c.</strong> 值得注意的是，输出的 Kp, Ki, Kd 为增量。在初始化时要确定输入与输出的范围（区间），用于进行区间映射。</li>
</ol>
</li>
</ol>
<h2 id="神经网络PID"><a href="#神经网络PID" class="headerlink" title="神经网络PID"></a>神经网络PID</h2><p>PID控制要获得较好的控制效果，就必须通过调整好比例、积分和微分三种控制作用，形成控制量中既相互配合又相互制约的关系，这种关系不一定是简单的“线性组合”，从变化无穷的非线性组合中可以找出最佳的。神经网络所具有的任意<strong>非线性表达</strong>的能力，可以通过对系统性能的学习来实现具有最佳组合的PID控制。采用BP神经网络，可以建立参数Kp、Ki、Kd自学习的PID控制器<br>基于BP神经网络的PID控制系统结构框图如下图所示：设定值r, 误差e, 实际值y是神经网络的三个输入：<br><img src="/img/fuzzy_control/1706072361358.png" alt="Alt text"><br>该结构采用增量式PID控制算法;<br>位置式 PID 累加了整个过去状态的偏差值 e(k)，需要处理器具备优秀的存储和计算能力，但若系统出现传感器故障或外界强干扰，会造成整个系统的剧烈变化，误差积累下难以返回当前最佳状态:<br><img src="/img/fuzzy_control/1706081247177.png" alt="Alt text"></p>
<p>BP神经网络PID控制算法可总结为：<br>    （1）确定BP神经网络结构，即确定输入层和隐含层的节点个数，选取各层加权系数的初值wij(0)、wli(0),选定学习速率和惯性系数，此时k&#x3D;1;<br>    （2）采样给定和反馈信号，即r(k)和y(k),计算误差e(k)&#x3D;r(k)-y(k);<br>    （3）确定输入量;<br>    （4）根据上述公式，计算各层神经元的输入、输出，神经网络输出层即为PID控制器的三个可调参数Kp、Ki和Kd;<br>    （5）由增量式PID控制公式，计算PID控制器的控制输出u(k);<br>    （6）进行神经网络学习，实时自动调整输出层和隐含层的加权系数wli(k)和wij(k)，实现PID控制参数的自适应调整;<br>    （7）置k&#x3D;k+1，返回步骤（2）;</p>
<h3 id="BP神经网络的结构"><a href="#BP神经网络的结构" class="headerlink" title="BP神经网络的结构"></a>BP神经网络的结构</h3><p><img src="/img/fuzzy_control/1706077250537.png" alt="Alt text"><br><img src="/img/fuzzy_control/image-14.png" alt="Alt text"><br><img src="/img/fuzzy_control/image-10.png" alt="Alt text"><br><img src="/img/fuzzy_control/image-11.png" alt="Alt text"><br><img src="/img/fuzzy_control/image-13.png" alt="Alt text"></p>
<h2 id="神经网络模糊PID"><a href="#神经网络模糊PID" class="headerlink" title="神经网络模糊PID"></a>神经网络模糊PID</h2><p>模糊神经网络，是使用神经网络来实现模糊推理，代替原来使用人类经验或者规则制定的模糊推理。</p>
<ol>
<li>可以利用神经网络的学习能力来调整模糊控制的控制规则、模糊化和去模糊化的方式，使模糊控制具有了一定的自适应能力；</li>
<li>模糊规则使神经网络的结构和权值，有了明确的意义，有了理论基础</li>
<li><img src="/img/fuzzy_control/1706059542841.png" alt="Alt text"></li>
<li><img src="/img/fuzzy_control/1706061802925.png" alt="Alt text"></li>
<li><img src="/img/fuzzy_control/1706062612368.png" alt="Alt text"></li>
<li><img src="/img/fuzzy_control/1706062647848.png" alt="Alt text"></li>
</ol>
]]></content>
      <categories>
        <category>专业知识</category>
        <category>控制</category>
        <category>模糊控制</category>
      </categories>
      <tags>
        <tag>控制</tag>
      </tags>
  </entry>
</search>
